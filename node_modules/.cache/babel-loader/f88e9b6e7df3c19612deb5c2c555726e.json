{"ast":null,"code":"var _jsxFileName = \"/Users/mstars_lab2_07/Desktop/scoreboard-class-2/src/App.js\";\nimport React from 'react';\nimport Player from './components/Player';\nimport Header from './components/Header';\nimport AddPlayer from './components/AddPlayer';\nimport './App.css';\nimport { toHaveStyle } from '@testing-library/jest-dom/dist/matchers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      players: [{\n        name: 'Enkhtuvshin',\n        score: 0,\n        id: 1\n      }, {\n        name: 'Dulam',\n        score: 0,\n        id: 2\n      }, {\n        name: 'Jambal',\n        score: 0,\n        id: 3\n      }, {\n        name: 'Jambal1',\n        score: 0,\n        id: 4\n      }, {\n        name: 'Jambal2',\n        score: 0,\n        id: 5\n      }]\n    };\n    this.max = 0;\n    this.arrMax1 = [];\n    this.lastPlayerID = this.state.players.length - 1;\n    this.playersId = this.state.players[this.lastPlayerID].id;\n\n    this.changeScore = (delta, index) => {\n      this.setState(prevState => {\n        const updatedPlayers = [...prevState.players];\n        const updatedPlayer = { ...updatedPlayers[index]\n        };\n        updatedPlayer.score += delta;\n        updatedPlayers[index] = updatedPlayer;\n        return {\n          players: updatedPlayers\n        };\n      }); // this.maxFinder()\n      // console.log(this.state.arrMax)\n    };\n\n    this.removePlayer = paraID => {\n      this.setState(prevState => {\n        return {\n          players: prevState.players.filter(p => p.id != paraID)\n        };\n      });\n    };\n\n    this.handleAddPlayer = name => {\n      this.setState({\n        players: [...this.state.players, {\n          name: name,\n          score: 0,\n          id: this.playersId += 1\n        }]\n      });\n    };\n  }\n\n  //   componentDidUpdate(){\n  //       this.maxFinder()\n  //   }\n  maxFinder() {\n    const arr = this.state.players.map(e => {\n      return e.score;\n    }); //    arr = props.score\n    //   console.log(arr)\n    //   console.log(props.score)\n\n    this.max = Math.max(...arr);\n    this.arrMax1.splice(0, this.arrMax1.length);\n\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] == this.max) {\n        this.arrMax1.push(i);\n      }\n    } // console.log(arrMax1)\n    // this.setState({\n    //     arrMax: max\n    // })\n    //   console.log(this.state.arrMax);\n    //   console.log(arrMax1);\n    //   console.log(this.max);\n\n  }\n\n  render() {\n    // console.log(this.state.players)\n    //   console.log()\n    this.maxFinder();\n    console.log(this.arrMax1);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scoreboard\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        title: \"Scoreboard\",\n        totalPlayers: this.state.players.length,\n        players: this.state.players\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 15\n      }, this), this.state.players.map((player, index) => /*#__PURE__*/_jsxDEV(Player, {\n        max: this.arrMax1.includes(index) && player.score !== 0 ? true : false,\n        name: player.name,\n        score: player.score,\n        id: player.id,\n        index: index,\n        removePlayer: this.removePlayer,\n        changeScore: this.changeScore\n      }, player.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 19\n      }, this)), /*#__PURE__*/_jsxDEV(AddPlayer, {\n        addPlayer: this.handleAddPlayer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\n{\n  /* <Player arr={this.arrMax} /> */\n}\nexport default App;","map":{"version":3,"sources":["/Users/mstars_lab2_07/Desktop/scoreboard-class-2/src/App.js"],"names":["React","Player","Header","AddPlayer","toHaveStyle","App","Component","state","players","name","score","id","max","arrMax1","lastPlayerID","length","playersId","changeScore","delta","index","setState","prevState","updatedPlayers","updatedPlayer","removePlayer","paraID","filter","p","handleAddPlayer","maxFinder","arr","map","e","Math","splice","i","push","render","console","log","player","includes"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Player from './components/Player'\nimport Header from './components/Header'\nimport AddPlayer from './components/AddPlayer'\nimport './App.css';\nimport { toHaveStyle } from '@testing-library/jest-dom/dist/matchers';\n\nclass App extends React.Component{\n  \n  state = {\n      players: [\n          {\n              name: 'Enkhtuvshin',\n              score: 0,\n              id: 1\n          },\n          {\n              name: 'Dulam',\n              score: 0,\n              id: 2\n          },\n          {\n              name: 'Jambal',\n              score: 0,\n              id: 3\n          },\n          {\n              name: 'Jambal1',\n              score: 0,\n              id: 4\n          },\n          {\n              name: 'Jambal2',\n              score: 0,\n              id: 5\n          }\n      ],\n  }\n\n  max =0;\n  arrMax1 = [];\n\n\n//   componentDidUpdate(){\n//       this.maxFinder()\n//   }\n\n  maxFinder(){\n      const arr = this.state.players.map((e)=>{return e.score});\n    //    arr = props.score\n    //   console.log(arr)\n    //   console.log(props.score)\n       this.max = Math.max(...arr);\n       this.arrMax1.splice(0,this.arrMax1.length)\n      for (let i=0; i<arr.length;i++){\n          if(arr[i]==this.max){\n              this.arrMax1.push(i)\n            }\n        }\n        // console.log(arrMax1)\n        // this.setState({\n        //     arrMax: max\n        // })\n    //   console.log(this.state.arrMax);\n    //   console.log(arrMax1);\n    //   console.log(this.max);\n    \n}\n\n\nlastPlayerID = this.state.players.length - 1\nplayersId = this.state.players[this.lastPlayerID].id\n\n\nchangeScore = (delta, index)=> {\n    this.setState( prevState => {\n        const updatedPlayers = [...prevState.players]\n        const updatedPlayer = {...updatedPlayers[index]}\n        \n        updatedPlayer.score += delta\n        \n        updatedPlayers[index] = updatedPlayer\n        \n        return {\n            players: updatedPlayers\n        }\n    } )\n    // this.maxFinder()\n    // console.log(this.state.arrMax)\n}\n\nremovePlayer = (paraID) => {\n    this.setState( prevState => {\n        return {\n            players: prevState.players.filter(p => p.id != paraID)\n        }\n    })\n}\n\nhandleAddPlayer = (name) => {\n    this.setState({\n        players: [\n            ...this.state.players,\n            {\n                name: name,\n                score: 0,\n                id: this.playersId += 1\n            }\n        ]\n    })\n}\n\nrender(){\n    // console.log(this.state.players)\n    //   console.log()\n    this.maxFinder()\n    console.log(this.arrMax1)\n\n      return(\n          <div className=\"scoreboard\">\n  \n              <Header \n                  title='Scoreboard' \n                  totalPlayers={this.state.players.length} \n                  players={this.state.players}\n              />\n              {this.state.players.map( (player, index) =>\n                  <Player  \n                        max ={this.arrMax1.includes(index) && player.score !==0 ? true : false}\n                      name={player.name} \n                      score={player.score}\n                      key={player.id}\n                      id= {player.id}\n                      index = {index}\n                      removePlayer = {this.removePlayer}\n                      changeScore = {this.changeScore}\n                  />\n                   )}\n                <AddPlayer addPlayer={this.handleAddPlayer} />\n          </div>\n      )\n  }\n}\n{/* <Player arr={this.arrMax} /> */}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}