{"ast":null,"code":"var _jsxFileName = \"/Users/mstars_lab2_07/Desktop/scoreboard-class-2/src/App.js\";\nimport React from 'react';\nimport Player from './components/Player';\nimport Header from './components/Header';\nimport AddPlayer from './components/AddPlayer';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      players: [{\n        name: 'Enkhtuvshin',\n        score: 0,\n        id: 1\n      }, {\n        name: 'Dulam',\n        score: 0,\n        id: 2\n      }, {\n        name: 'Jambal',\n        score: 0,\n        id: 3\n      }, {\n        name: 'Jambal1',\n        score: 0,\n        id: 4\n      }, {\n        name: 'Jambal2',\n        score: 0,\n        id: 5\n      }]\n    };\n    this.lastPlayerID = this.state.players.length - 1;\n    this.playersId = this.state.players[this.lastPlayerID].id;\n\n    this.changeScore = (delta, index) => {\n      this.setState(prevState => {\n        const updatedPlayers = [...prevState.players];\n        const updatedPlayer = { ...updatedPlayers[index]\n        };\n        updatedPlayer.score += delta;\n        updatedPlayers[index] = updatedPlayer;\n        return {\n          players: updatedPlayers\n        };\n      });\n    };\n\n    this.removePlayer = paraID => {\n      this.setState(prevState => {\n        return {\n          players: prevState.players.filter(p => p.id != paraID)\n        };\n      });\n    };\n\n    this.handleAddPlayer = name => {\n      this.setState({\n        players: [...this.state.players, {\n          name: name,\n          score: 0,\n          id: this.playersId += 1\n        }]\n      });\n    };\n  }\n\n  componentDidMount() {\n    const arr = this.state.players.map(e => {\n      return e.score;\n    }); //    arr = props.score\n\n    console.log(arr); //   console.log(props.score)\n\n    const max = Math.max(...arr);\n    let arrMax = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] == max) {\n        arrMax.push(i);\n      }\n    }\n\n    console.log(arrMax);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scoreboard\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        title: \"Scoreboard\",\n        totalPlayers: this.state.players.length,\n        players: this.state.players\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 15\n      }, this), this.state.players.map((player, index) => /*#__PURE__*/_jsxDEV(Player, {\n        name: player.name,\n        score: player.score,\n        id: player.id,\n        index: index,\n        removePlayer: this.removePlayer,\n        changeScore: this.changeScore\n      }, player.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 19\n      }, this)), /*#__PURE__*/_jsxDEV(AddPlayer, {\n        addPlayer: this.handleAddPlayer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mstars_lab2_07/Desktop/scoreboard-class-2/src/App.js"],"names":["React","Player","Header","AddPlayer","App","Component","state","players","name","score","id","lastPlayerID","length","playersId","changeScore","delta","index","setState","prevState","updatedPlayers","updatedPlayer","removePlayer","paraID","filter","p","handleAddPlayer","componentDidMount","arr","map","e","console","log","max","Math","arrMax","i","push","render","player"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Player from './components/Player'\nimport Header from './components/Header'\nimport AddPlayer from './components/AddPlayer'\nimport './App.css';\n\nclass App extends React.Component{\n  \n  state = {\n      players: [\n          {\n              name: 'Enkhtuvshin',\n              score: 0,\n              id: 1\n          },\n          {\n              name: 'Dulam',\n              score: 0,\n              id: 2\n          },\n          {\n              name: 'Jambal',\n              score: 0,\n              id: 3\n          },\n          {\n              name: 'Jambal1',\n              score: 0,\n              id: 4\n          },\n          {\n              name: 'Jambal2',\n              score: 0,\n              id: 5\n          }\n      ]\n  }\n\n  componentDidMount(){\n      const arr = this.state.players.map((e)=>{return e.score});\n    //    arr = props.score\n      console.log(arr)\n    //   console.log(props.score)\n      const max = Math.max(...arr);\n      let arrMax = [];\n      for (let i=0; i<arr.length;i++){\n          if(arr[i]==max){\n              arrMax.push(i)\n          }\n      }\n      console.log(arrMax);\n      \n  }\n\n  lastPlayerID = this.state.players.length - 1\n  playersId = this.state.players[this.lastPlayerID].id\n\n  changeScore = (delta, index)=> {\n    this.setState( prevState => {\n      const updatedPlayers = [...prevState.players]\n      const updatedPlayer = {...updatedPlayers[index]}\n\n      updatedPlayer.score += delta\n      \n      updatedPlayers[index] = updatedPlayer\n\n      return {\n        players: updatedPlayers\n      }\n    } )\n  }\n\n  removePlayer = (paraID) => {\n      this.setState( prevState => {\n          return {\n              players: prevState.players.filter(p => p.id != paraID)\n          }\n      })\n  }\n\n  handleAddPlayer = (name) => {\n    this.setState({\n        players: [\n            ...this.state.players,\n            {\n                name: name,\n                score: 0,\n                id: this.playersId += 1\n            }\n        ]\n    })\n  }\n\n  render(){\n      return(\n          <div className=\"scoreboard\">\n  \n              <Header \n                  title='Scoreboard' \n                  totalPlayers={this.state.players.length} \n                  players={this.state.players}\n              />\n              {this.state.players.map( (player, index) =>\n                  <Player \n                      name={player.name} \n                      score={player.score}\n                      key={player.id}\n                      id= {player.id}\n                      index = {index}\n                      removePlayer = {this.removePlayer}\n                      changeScore = {this.changeScore}\n                  />\n                   )}\n                <AddPlayer addPlayer={this.handleAddPlayer} />\n          </div>\n      )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}